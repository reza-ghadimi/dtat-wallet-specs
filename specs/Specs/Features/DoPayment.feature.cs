// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Specs.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class DoPaymentFeature : object, Xunit.IClassFixture<DoPaymentFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "DoPayment.feature"
#line hidden
        
        public DoPaymentFeature(DoPaymentFeature.FixtureData fixtureData, Specs_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Do Payment", "\tIn order to make an online payment\r\n\tAs a Dtat wallet user\r\n\tI want to be able t" +
                    "o pay it with my wallet credit", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="[Buy products and pay it online]")]
        [Xunit.TraitAttribute("FeatureTitle", "Do Payment")]
        [Xunit.TraitAttribute("Description", "[Buy products and pay it online]")]
        [Xunit.TraitAttribute("Category", "Api-Level")]
        public void BuyProductsAndPayItOnline()
        {
            string[] tagsOfScenario = new string[] {
                    "Api-Level"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[Buy products and pay it online]", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "IP",
                            "NationalCode",
                            "DisplayName",
                            "CellPhoneNumber",
                            "EmailAddress"});
                table1.AddRow(new string[] {
                            "127.0.0.1",
                            "1234567891",
                            "Mr. Dariush Tasdighi",
                            "09121087461",
                            "dariusht@gmail.com"});
#line 9
 testRunner.Given("[I logged into my wallet account with my phone as an user named Dariush]", ((string)(null)), table1, "Given ");
#line hidden
#line 12
 testRunner.And("[I add $\'20000000\' rials to my wallet credit]", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
 testRunner.When("[I want to pay the amount of $\'1500000\' rials to finalize my order]", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
 testRunner.Then("[My payment must be successful]", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
 testRunner.And("[My wallet credit must be equal to last wallet balance minus purchase cost]", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="[Buy products and pay it online with insufficient credit]")]
        [Xunit.TraitAttribute("FeatureTitle", "Do Payment")]
        [Xunit.TraitAttribute("Description", "[Buy products and pay it online with insufficient credit]")]
        [Xunit.TraitAttribute("Category", "Api-Level")]
        public void BuyProductsAndPayItOnlineWithInsufficientCredit()
        {
            string[] tagsOfScenario = new string[] {
                    "Api-Level"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[Buy products and pay it online with insufficient credit]", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 18
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "IP",
                            "NationalCode",
                            "DisplayName",
                            "CellPhoneNumber",
                            "EmailAddress"});
                table2.AddRow(new string[] {
                            "127.0.0.1",
                            "1987654321",
                            "Mr. Reza Qadimi",
                            "09215149218",
                            "RezaQadimi.ir@Gmail.com"});
#line 19
 testRunner.Given("[I logged into my wallet account with my phone as an user named Reza]", ((string)(null)), table2, "Given ");
#line hidden
#line 22
 testRunner.And("[I charged my wallet account $\'5000000\' rials]", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
 testRunner.And("[I want to spend more than my wallet credit]", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
 testRunner.When("[I want to pay the price to finalize my new order]", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 25
 testRunner.Then("[I should get insufficient balance error]", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 26
 testRunner.And("[my wallet credit must remain unchanged]", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                DoPaymentFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                DoPaymentFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
